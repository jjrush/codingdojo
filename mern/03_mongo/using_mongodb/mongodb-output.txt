> use my_first_db
switched to db my_first_db
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> db.dropDatabase()
{ "ok" : 1 }
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> use my_first_db
switched to db my_first_db
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> use other_db
switched to db other_db
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> db.createCollection("students")
{ "ok" : 1 }
> show dbs
admin     0.000GB
config    0.000GB
local     0.000GB
other_db  0.000GB
> use my_first_db
switched to db my_first_db
> show dbs
admin     0.000GB
config    0.000GB
lodb.s^Cdents.insert({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: }})
byeb.students.insert({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: }})
> db.students.insert({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: }})
C:\Program Files\MongoDB\Server\4.4\bin>_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: }})
C:\Program Files\MongoDB\Server\4.4\bin>_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: N}})
C:\Program Files\MongoDB\Server\4.4\bin>
C:\Program Files\MongoDB\Server\4.4\bin>mongo.exe
MongoDB shell version v4.4.4
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("45762194-65d6-4094-bb7a-430e87425f4a") }
MongoDB server version: 4.4.4
---
The server generated these startup warnings when booting:
        2021-03-10T17:13:33.575-08:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> use my_first_db
switched to db my_first_db
> show dbs
admin        0.000GB
config       0.000GB
local        0.000GB
my_first_db  0.000GB
other_db     0.000GB
> db.students.insert({name: "Joe", home_state: "Nevada", lucky_number: 7, birthday: {month: 7, day: 7, year: 1997}})
WriteResult({ "nInserted" : 1 })
> db.students.find()
{ "_id" : ObjectId("604997be95a35c999d8abe49"), "name" : "Joe", "home_state" : "Nevada", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 7, "year" : 1997 } }
> db.students.insert({name: "Jane", home_state: "California", lucky_number: 8, birthday: {month: 8, day: 8, year: 1998}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "Potato", home_state: "Idaho", lucky_number: 3, birthday: {month: 1, day: 2, year: 1990}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "Hello", home_state: "California", lucky_number: 9, birthday: {month: 12, day: 21, year: 2001}})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "World", home_state: "California", lucky_number: 6, birthday: {month: 4, day: 22, year: 1992}})
WriteResult({ "nInserted" : 1 })
> db.students.find()
{ "_id" : ObjectId("604997be95a35c999d8abe49"), "name" : "Joe", "home_state" : "Nevada", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 7, "year" : 1997 } }
{ "_id" : ObjectId("604997ed95a35c999d8abe4a"), "name" : "Jane", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 } }
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 } }
{ "_id" : ObjectId("6049981e95a35c999d8abe4c"), "name" : "Hello", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 12, "day" : 21, "year" : 2001 } }
{ "_id" : ObjectId("604998de95a35c999d8abe4d"), "name" : "World", "home_state" : "California", "lucky_number" : 6, "birthday" : { "month" : 4, "day" : 22, "year" : 1992 } }
> db.students.find(home_state: "California")
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:27
> db.students.find({home_state: "California"})
{ "_id" : ObjectId("604997ed95a35c999d8abe4a"), "name" : "Jane", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 } }
{ "_id" : ObjectId("6049981e95a35c999d8abe4c"), "name" : "Hello", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 12, "day" : 21, "year" : 2001 } }
{ "_id" : ObjectId("604998de95a35c999d8abe4d"), "name" : "World", "home_state" : "California", "lucky_number" : 6, "birthday" : { "month" : 4, "day" : 22, "year" : 1992 } }
> db.students.find({lucky_number: {$gt: 3}})
{ "_id" : ObjectId("604997be95a35c999d8abe49"), "name" : "Joe", "home_state" : "Nevada", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 7, "year" : 1997 } }
{ "_id" : ObjectId("604997ed95a35c999d8abe4a"), "name" : "Jane", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 } }
{ "_id" : ObjectId("6049981e95a35c999d8abe4c"), "name" : "Hello", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 12, "day" : 21, "year" : 2001 } }
{ "_id" : ObjectId("604998de95a35c999d8abe4d"), "name" : "World", "home_state" : "California", "lucky_number" : 6, "birthday" : { "month" : 4, "day" : 22, "year" : 1992 } }
> db.students.find({lucky_number: {$eq: 9}})
{ "_id" : ObjectId("6049981e95a35c999d8abe4c"), "name" : "Hello", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 12, "day" : 21, "year" : 2001 } }
> db.students.find({lucky_number: {$gte: 1}, lucky_number: {$lte: 9}})
{ "_id" : ObjectId("604997be95a35c999d8abe49"), "name" : "Joe", "home_state" : "Nevada", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 7, "year" : 1997 } }
{ "_id" : ObjectId("604997ed95a35c999d8abe4a"), "name" : "Jane", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 } }
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 } }
{ "_id" : ObjectId("6049981e95a35c999d8abe4c"), "name" : "Hello", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 12, "day" : 21, "year" : 2001 } }
{ "_id" : ObjectId("604998de95a35c999d8abe4d"), "name" : "World", "home_state" : "California", "lucky_number" : 6, "birthday" : { "month" : 4, "day" : 22, "year" : 1992 } }
> db.students.find({*: {$push: {interests: "coding"}})
...
... ^C

> db.students.find({}, {$set: {"interests": "coding"}})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.students.update({}, {$set: {"interests": "coding"}},false,true)
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })
> db.students.find()
{ "_id" : ObjectId("604997be95a35c999d8abe49"), "name" : "Joe", "home_state" : "Nevada", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 7, "year" : 1997 }, "interests" : "coding" }
{ "_id" : ObjectId("604997ed95a35c999d8abe4a"), "name" : "Jane", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 }, "interests" : "coding" }
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : "coding" }
{ "_id" : ObjectId("6049981e95a35c999d8abe4c"), "name" : "Hello", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 12, "day" : 21, "year" : 2001 }, "interests" : "coding" }
{ "_id" : ObjectId("604998de95a35c999d8abe4d"), "name" : "World", "home_state" : "California", "lucky_number" : 6, "birthday" : { "month" : 4, "day" : 22, "year" : 1992 }, "interests" : "coding" }
> db.students.update({_id: ObjectId("6049980495a35c999d8abe4b")}, {$push: {interests: "taxes"}},false,true)
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 2,
                "errmsg" : "The field 'interests' must be an array but is of type string in document {_id: ObjectId('6049980495a35c999d8abe4b')}"
        }
})
> db.students.update({_id: ObjectId("6049980495a35c999d8abe4b")}, {$push: {interests: "taxes"}})
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 2,
                "errmsg" : "The field 'interests' must be an array but is of type string in document {_id: ObjectId('6049980495a35c999d8abe4b')}"
        }
})
> db.students.update({}, {$set: {"interests": ["coding", "MongoDB", "brunch"]}},false,true)
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })
> db.students.find()
{ "_id" : ObjectId("604997be95a35c999d8abe49"), "name" : "Joe", "home_state" : "Nevada", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 7, "year" : 1997 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
{ "_id" : ObjectId("604997ed95a35c999d8abe4a"), "name" : "Jane", "home_state" : "California", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
{ "_id" : ObjectId("6049981e95a35c999d8abe4c"), "name" : "Hello", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 12, "day" : 21, "year" : 2001 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
{ "_id" : ObjectId("604998de95a35c999d8abe4d"), "name" : "World", "home_state" : "California", "lucky_number" : 6, "birthday" : { "month" : 4, "day" : 22, "year" : 1992 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
> db.students.update({_id: ObjectId("6049980495a35c999d8abe4b")}, {$push: {interests: "taxes"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find({_id: ObjectId("6049980495a35c999d8abe4b")})
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch", "taxes" ] }
> db.students.find({_id: ObjectId("6049980495a35c999d8abe4b")}, {$unset: {interests: "taxes"}})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.students.find({_id: ObjectId("6049980495a35c999d8abe4b")}, {$unset: {interests: ["taxes"]}})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.students.find({_id: ObjectId("6049980495a35c999d8abe4b")}, {$pull: {interests: "taxes"}})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.students.update({_id: ObjectId("6049980495a35c999d8abe4b")}, {$pull: {interests: "taxes"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find({_id: ObjectId("6049980495a35c999d8abe4b")})
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
> db.students.deleteMany({home_state: "California"})
{ "acknowledged" : true, "deletedCount" : 3 }
> db.students.find()
{ "_id" : ObjectId("604997be95a35c999d8abe49"), "name" : "Joe", "home_state" : "Nevada", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 7, "year" : 1997 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
> db.students.deleteMany({name: "Joe"})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
> db.students.insert({name: "Hello", home_state: "California", lucky_number: 9, birthday: {month: 12, day: 21, year: 2001}})
WriteResult({ "nInserted" : 1 })
> db.students.deleteOne({lucky_number: ${gt: 5}})
uncaught exception: SyntaxError: missing } after property list :
@(shell):1:38
> db.students.deleteOne({lucky_number: { $gt: 5 }})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ] }
> db.students.update({}, {$set: {number_of_belts: 0}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ], "number_of_belts" : 0 }
> db.students.insert({name: "Jane", home_state: "Washington", lucky_number: 8, birthday: {month: 8, day: 8, year: 1998}})
WriteResult({ "nInserted" : 1 })
> db.students.update({}, {$set: {number_of_belts: 0}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.stduents.find()
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ], "number_of_belts" : 0 }
{ "_id" : ObjectId("6049a18095a35c999d8abe4f"), "name" : "Jane", "home_state" : "Washington", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 } }
> db.students.update({}, {$set: {number_of_belts: 0}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.students.update({_id: ObjectId("6049a18095a35c999d8abe4f")}, {$set: {number_of_belts: 0}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ], "number_of_belts" : 0 }
{ "_id" : ObjectId("6049a18095a35c999d8abe4f"), "name" : "Jane", "home_state" : "Washington", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 }, "number_of_belts" : 0 }
> db.students.find().count()
2
> db.students.find({}.count())
uncaught exception: TypeError: (intermediate value).count is not a function :
@(shell):1:18
> db.students.find(count())
uncaught exception: ReferenceError: count is not defined :
@(shell):1:1
> db.students.find({home_state: "Washington"})
{ "_id" : ObjectId("6049a18095a35c999d8abe4f"), "name" : "Jane", "home_state" : "Washington", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 }, "number_of_belts" : 0 }
> db.students.find({home_state: "Washington"}).count()
1
> db.students.find({home_state: "Washington"}, {$inc: number_of_belts})
uncaught exception: ReferenceError: number_of_belts is not defined :
@(shell):1:47
> db.students.find({home_state: "Washington"}, {$inc: "number_of_belts"})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.students.find({home_state: "Washington"}, {number_of_belts: $inc})
uncaught exception: ReferenceError: $inc is not defined :
@(shell):1:47
> db.students.find({home_state: "Washington"}, {number_of_belts: {$inc}})
uncaught exception: ReferenceError: $inc is not defined :
@(shell):1:65
> db.students.find({home_state: "Washington"}, {$inc: {number_of_belts: 1}})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.students.find({home_state: "Washington"}, {$inc: {"number_of_belts": 1}})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.students.update({home_state: "Washington"}, {$inc: {number_of_belts: 1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({home_state: "Washington"}, {$rename: {number_of_belts: belts_earned}})
uncaught exception: ReferenceError: belts_earned is not defined :
@(shell):1:59
> db.students.update({home_state: "Washington"}, {$rename: {number_of_belts: "belts_earned"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({}, {$rename: {number_of_belts: "belts_earned"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({}, {$unset: lucky_number})
uncaught exception: ReferenceError: lucky_number is not defined :
@(shell):1:25
> db.students.update({}, {$unset: lucky_number}, false ,true)
uncaught exception: ReferenceError: lucky_number is not defined :
@(shell):1:25
> db.students.update()
uncaught exception: Error: need a query :
DBCollection.prototype._parseUpdate@src/mongo/shell/collection.js:449:15
DBCollection.prototype.update@src/mongo/shell/collection.js:497:18
@(shell):1:1
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "lucky_number" : 3, "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ], "belts_earned" : 0 }
{ "_id" : ObjectId("6049a18095a35c999d8abe4f"), "name" : "Jane", "home_state" : "Washington", "lucky_number" : 8, "birthday" : { "month" : 8, "day" : 8, "year" : 1998 }, "belts_earned" : 1 }
> db.students.update({}, {$unset: {lucky_number:!}}, false ,true)
uncaught exception: SyntaxError: expected expression, got '}' :
@(shell):1:47
> db.students.update({}, {$unset: {lucky_number:1}}, false ,true)
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ], "belts_earned" : 0 }
{ "_id" : ObjectId("6049a18095a35c999d8abe4f"), "name" : "Jane", "home_state" : "Washington", "birthday" : { "month" : 8, "day" : 8, "year" : 1998 }, "belts_earned" : 1 }
> db.students.update({}, {$set: {updated_on: "March 10th 2021"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.updateMany({}, {$set: {updated_on: "March 10th 2021"}})
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 1 }
> db.students.find()
{ "_id" : ObjectId("6049980495a35c999d8abe4b"), "name" : "Potato", "home_state" : "Idaho", "birthday" : { "month" : 1, "day" : 2, "year" : 1990 }, "interests" : [ "coding", "MongoDB", "brunch" ], "belts_earned" : 0, "updated_on" : "March 10th 2021" }
{ "_id" : ObjectId("6049a18095a35c999d8abe4f"), "name" : "Jane", "home_state" : "Washington", "birthday" : { "month" : 8, "day" : 8, "year" : 1998 }, "belts_earned" : 1, "updated_on" : "March 10th 2021" }